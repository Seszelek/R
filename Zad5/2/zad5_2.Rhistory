Sys.which("make")
install.packages("data.tree","formattable","DiagrammeR")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
install.packages("data.tree","formattable","DiagrammeR")
install.packages("data.tree")
install.packages("formattable")
install.packages("DiagrammeR")
Download ahp_0.2.12.tar.gz
install.packages("C:\Program Files\R\R_ahp\ahp_0.2.12.tar.gz",repos=NULL,type = "source")
install.packages("C:/Program Files/R/R_ahp/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
install.packages("C:/Users/asiat/Documents/R/R_projects/R_ahp/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
install.packages("ahp_0.2.12.tar.gz",repos=NULL,type = "source")
install.packages("ahp_0.2.12.tar.gz",repos=NULL,type="source")
utils:::menuInstallPkgs()
utils:::menuInstallLocal()
library(blockTools)
library(blockTools)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(DiagrammeR)
library(formattable)
library(data.tree)
library(ahp)
ahpFile <- system.file("extdata", "smartfony.ahp", package="ahp")
smartfonyAhp <- LoadFile(ahpFile)
smartfonyAhp <- Load(ahpFile)
q()
library(randomForest)
library(e1071)
library(party)
library(mlr)
library(rFerns)
s=read.csv("C:/Users/asiat/Documents/R/Zad5/2/smartfony.csv")
s <- s [1:8]
s$nazwa = factor(s$nazwa)
s$ocena_klientow = factor(s$ocena_klientow)
summarizeColumns(s)
rdesc = makeResampleDesc("CV", iters = 10)
task = makeClassifTask(id = deparse(substitute(s)), s, "ocena_klientow",
                       weights = NULL, blocking = NULL, coordinates = NULL,
                       positive = NA_character_, fixup.data = "warn", check.data = TRUE)
lrns <- makeLearners(c("rpart", "C50", "ctree", "naiveBayes", "randomForest"), type = "classif")
bmr <- benchmark(learners = lrns, tasks = task, rdesc, models = TRUE, measures = list(acc, ber))
p = getBMRPredictions(bmr)
plotBMRSummary(bmr)
