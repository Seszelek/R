Sys.which("make")
install.packages("data.tree","formattable","DiagrammeR")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
install.packages("data.tree","formattable","DiagrammeR")
install.packages("data.tree")
install.packages("formattable")
install.packages("DiagrammeR")
Download ahp_0.2.12.tar.gz
install.packages("C:\Program Files\R\R_ahp\ahp_0.2.12.tar.gz",repos=NULL,type = "source")
install.packages("C:/Program Files/R/R_ahp/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
install.packages("C:/Users/asiat/Documents/R/R_projects/R_ahp/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
install.packages("ahp_0.2.12.tar.gz",repos=NULL,type = "source")
install.packages("ahp_0.2.12.tar.gz",repos=NULL,type="source")
utils:::menuInstallPkgs()
utils:::menuInstallLocal()
library(blockTools)
library(blockTools)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(DiagrammeR)
library(formattable)
library(data.tree)
library(ahp)
ahpFile <- system.file("extdata", "smartfony.ahp", package="ahp")
smartfonyAhp <- LoadFile(ahpFile)
smartfonyAhp <- Load(ahpFile)
q()
library(reticulate)
reticulate::install_miniconda()
tensorflow::install_tensorflow()
library("tensorflow")
keras::install_keras()
library("keras")
cifar <- dataset_cifar10()
x_train <- cifar$train$x
x_test <- cifar$test$x
y_train <- cifar$train$y
y_test <- cifar$test$y
x_train <- array_reshape(x_train, c(nrow(x_train), 3072))
x_train <- x_train / 255   
x_test <- array_reshape(x_test, c(nrow(x_test), 3072))
x_test <- x_test / 255
y_train <- to_categorical(y_train, num_classes = 10)
y_test <- to_categorical(y_test, num_classes = 10)
model <- keras_model_sequential() %>%layer_dense(units = 256, activation = "relu", input_shape = c(3072)) %>% layer_dropout(rate = 0.25) %>% layer_dense(units = 128, activation = "relu") %>% layer_dropout(rate = 0.25) %>% layer_dense(units = 64, activation = "relu") %>% layer_dropout(rate = 0.25) %>% layer_dense(units = 10, activation = "relu")
summary(model)
model %>% compile(loss = "categorical_crossentropy",optimizer = optimizer_adam(), metrics = c("accuracy"))
history <- model %>% fit(x_train, y_train, epochs = 50, batch_size = 128, validation_split = 0.15)
model %>% evaluate(x_test, y_test)
summary(model)
#wersja splaszczona
cifar <- dataset_cifar10()
x_train <- cifar$train$x
x_test <- cifar$test$x
y_train <- cifar$train$y
y_test <- cifar$test$y
x_train <- x_train / 255
x_test <- x_test / 255
y_train <- to_categorical(y_train, num_classes = 10)
y_test <- to_categorical(y_test, num_classes = 10)
model <- keras_model_sequential() %>% layer_flatten(input_shape = c(32, 32, 3)) %>% layer_dense(units = 128, activation = "relu") %>% layer_dense(units = 10, activation = "softmax")
summary(model)
model %>% compile(loss = "categorical_crossentropy", optimizer = optimizer_adam(), metrics = c("accuracy"))
history <- model %>% fit(x_train, y_train, epochs = 50, batch_size = 128, validation_split = 0.15)
model %>% evaluate(x_test, y_test)
model %>% predict(x_test) %>% k_argmin()
model %>% evaluate(x_test, y_test)
virtualenv_create("myenv")
install_keras(method="virtualenv", envname="myenv")
model %>% evaluate(x_test, y_test)
plot(model)
virtualenv_create("myenv")
pip install pydot
plot(history)
save.image("C:\\Users\\asiat\\Documents\\R\\Zad6\\zad6.RData")
